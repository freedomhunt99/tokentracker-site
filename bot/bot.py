import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.filters.command import CommandObject

TOKEN = "7935011116:AAFNde-V4vbtl_uk3ZjAZM3uPS36-OaDgus"  # üîÅ –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 8187961356  # üîÅ –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram user_id

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()

def main_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TokenTracker") 
    kb.button(text="üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    kb.button(text="üß™ –ë–µ—Ç–∞-–¥–æ—Å—Ç—É–ø")   
    kb.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    kb.button(text="üåê –í–µ–±—Å–∞–π—Ç")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

@dp.message(F.text == "/start")
async def start(msg: Message):
    banner = FSInputFile("assets/banner.png")
    await msg.answer_photo(
        photo=banner,
        caption=(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TokenTracker</b>\n\n"
            "üß† –≠—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º —Ç—Ä–µ–∫–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤.\n"
            "–≠—Ç–æ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è:\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –∫–∏—Ç–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤\n"
            "‚Ä¢ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ª–æ–≥–∏–Ω–æ–≤\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –º–µ–¥–∏–∞\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n\n"
            "‚öôÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ. –ù–∏–∫–∞–∫–∏—Ö —É—Ç–µ—á–µ–∫. –ù–∏–∫–∞–∫–∏—Ö —Ñ–µ–π–∫–æ–≤.\n\n"
            "‚¨áÔ∏è –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:"
        ),
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
async def features(msg: Message):
    await msg.answer(
        "<b>üöÄ –ß—Ç–æ —É–º–µ–µ—Ç TokenTracker:</b>\n\n"
        "üêã <b>–ê–Ω–∞–ª–∏–∑ –∫–∏—Ç–æ–≤</b>\n–¢—Ä–µ–∫–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: –≤—Ö–æ–¥—ã, –≤—ã—Ö–æ–¥—ã, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.\n\n"
        "üë®‚Äçüíª <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–≤–µ–ª–æ–ø–µ—Ä–∞</b>\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, —Å–≤–∞–ø–æ–≤, –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n\n"
        "‚öñÔ∏è <b>–†–∞–∑–≤–µ–¥–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É</b>\n–î–≤–∏–∂–µ–Ω–∏—è —Ö–æ–ª–¥–µ—Ä–æ–≤, –∞–Ω–æ–º–∞–ª–∏–∏, —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤.\n\n"
        "üß† <b>–õ–æ–∫–∞–ª—å–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑</b>\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ü–ö ‚Äî –±–µ–∑ API –∏ –ª–æ–≥–∏–Ω–æ–≤. –ú–æ–∑–≥ –Ω–∞ –±–∞–∑–µ Genspark LLM.\n\n"
        "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ TVL</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –î–∞—à–±–æ—Ä–¥—ã.\n\n"
        "üì£ <b>Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n–ê–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞—Ç–∞—Ö. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–æ–ª–Ω—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π.\n\n"
        "üîî <b>–ê–ª—ë—Ä—Ç—ã –ø–æ –º–µ–¥–∏–∞</b>\n–†–µ–∑–∫–∏–µ –≤—Å–ø–ª–µ—Å–∫–∏ –Ω–∞ Cointelegraph, X/Twitter, Reddit ‚Äî —Å—Ä–∞–∑—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
        "üßæ <b>–¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</b>\nGitHub, Discord, Notion, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.\n\n"
        "üéí <b>–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</b>\n–î–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã –∏ –∫–æ—à–µ–ª—å–∫–∏ ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ."
    )

@dp.message(F.text == "‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TokenTracker")
async def how_it_works(msg: Message):
    await msg.answer(
        "<b>‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TokenTracker:</b>\n\n"
        "1Ô∏è‚É£ <b>–í–≤–æ–¥–∏—à—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞</b>\n–ò–ª–∏ –≤—ã–±–∏—Ä–∞–µ—à—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö. –†–∞–±–æ—Ç–∞–µ—Ç —Å Ethereum, BNB, Arbitrum, Solana –∏ –¥—Ä.\n\n"
        "2Ô∏è‚É£ <b>–ü–æ–ª—É—á–∞–µ—à—å –¥–∞—à–±–æ—Ä–¥</b>\n–ö—Ä—É–ø–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±–∞–ª–∞–Ω—Å—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\n\n"
        "3Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –∞–ª–µ—Ä—Ç—ã</b>\n–ó–∞–∫—É–ø–∫–∏ –∫–∏—Ç–æ–≤, –≤—ã–≤–æ–¥—ã, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\n"
        "üß† –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ API."
    )

@dp.message(F.text == "üß™ –ë–µ—Ç–∞-–¥–æ—Å—Ç—É–ø")
async def beta_start(msg: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer(
        "üß™ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –±–µ—Ç–∞-–¥–æ—Å—Ç—É–ø–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–µ–±—è.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb
    )

@dp.message(F.contact)
async def handle_contact(msg: Message):
    phone = msg.contact.phone_number
    user = msg.from_user
    print(f"User {user.full_name} ({user.id}) –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º: {phone}")

    await msg.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –∫ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ –æ—Ç–∫—Ä—ã—Ç.\n\nüîΩ –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É: https://example.com/download",
        reply_markup=main_keyboard()
    )

@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_intro(msg: Message):
    await msg.answer(
        "üì® –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –æ–Ω–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )


@dp.message(Command("–æ—Ç–≤–µ—Ç"))
async def reply_to_user(msg: Message, command: CommandObject):
    print("[DEBUG] /–æ—Ç–≤–µ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")

    if not command.args:
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    parts = command.args.split(maxsplit=1)
    if len(parts) < 2:
        await msg.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id, reply_text = parts
    try:
        await bot.send_message(chat_id=int(user_id), text=f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{reply_text}")
        await msg.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        print(f"[LOG] –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"[ERROR]: {e}")


@dp.message(F.text & ~F.chat.type.in_({"channel"}))
async def forward_to_admin(msg: Message):
    if msg.from_user.id == ADMIN_ID:
        return

    text = (
        f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        f"<b>–ò–º—è:</b> {msg.from_user.full_name}\n"
        f"<b>ID:</b> <code>{msg.from_user.id}</code>\n\n"
        f"{msg.text}"
    )
    await bot.send_message(ADMIN_ID, text)
    await msg.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@dp.message(F.text == "üåê –í–µ–±—Å–∞–π—Ç")
async def website(msg: Message):
    await msg.answer("üåê –ù–∞—à —Å–∞–π—Ç: https://example.com")


@dp.message(F.text)
async def fallback(msg: Message):
    if msg.text.startswith("/"):
        return
    await msg.answer("‚ùì –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_keyboard())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())